* 영속성 컨텍스트
    : 엔티티를 영구 저장하는 환경
    : 엔티티매니저를 통해서 접근 가능 (1:1)
    : 이점
        > 1차 캐시
        > 동일성 보장
        > 쓰기 지연
        > 변경 감지
        > 지연 로딩

----------------------------------------------------------------
* 엔티티의 생명주기
1. 비영속
    : 객체만 생성한 경우

2. 영속
    : 영속성 컨텍스트에 저장
    : persist를 사용하거나 find등 DB 조회 후 1차 캐시에 넣는 경우

3. 준영속
    : 영속성 컨텍스트에서 분리
    : 상태 변경 방법
        > detach: 특정 엔티티만 변경
        > clear: 영속성 컨텍스트를 완전 초기화
        > close: 영속성 컨텍스트를 종료

4. 삭제
    : 객체 삭제

----------------------------------------------------------------
* 플러시(flush)
    : 영속성 컨텍스트의 변경 내용을 데이터베이스에 반영

    1. 플러시하는 방법
        > em.flush(): 직접 호출
        > 트랙잭션 커밋: 자동 호출
        > JPQL 쿼리 실행: 자동 호출

    2. 플러시 모드 옵션 (em.setFlushMode()) -> 사용할 일 X
        > FlushModeType.AUTO: 커밋이나 쿼리실행할 때 (기본값)
        > FlushModeType.COMMIT: 커밋할 때만

----------------------------------------------------------------
* 객체와 테이블 매핑
    1. @Entity
        > 테이블과 매핑할 클래스
        > 기본 생성자 필수
        > name 기본값: 클래스 명칭 그대로 사용

    2. @Table
        > 테이블 명칭과 다르게 맵핑

----------------------------------------------------------------
* 데이터베이스 스키마 자동 생성
    : persistence.xml에 property 추가
    (※ 운영에서는 create, create-drop, update 사용하면 안됨!!!!!)

    1. value값
        > create: 기존 테이블 삭제 후 생성
        > create-drop: create와 동일하나 종료될때 테이블 삭제
        > update: 변경 분만 반영
        > validate: 엔티티와 테이블 맵핑 확인
        > none: 사용X / 주석처리와 동일

    2. 주의사항
        > 로컬: create, update
        > 테스트: update, validate
        > 스테이징, 운영: validate, none

----------------------------------------------------------------
* 매핑 어노테이션
    1. @Column
        : 컬럼 맵핑

    2. @Temporal
        : 날짜 타입

    3. @Enumerated
        : enum 타입
        : ORDINAL 사용 X

    4. @Lob
        : blob, clob

    5. @Transient
        : 특정 필드를 컬럼에서 제외

----------------------------------------------------------------
* 기본 키 맵핑
    1. @Id
        : 직접 할당

    2. @GeneratedValue
        : 자동 생성

----------------------------------------------------------------